#include <iostream>
#include <string>

#include "CRC.h"

using namespace std;

string numerals = "0123456789";
string alphabetLower = "abcdefghijklmnopqrstuvwxyz";
string alphabetUpper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
string specialAnsi = "!\"#¤%&/()=?`^¨*';:_,.";

// Our Brute Force Function
void CrackHash(string source, unsigned int hash, string seed, size_t length) {
  static const int startTick = GetTickCount64();
  
  static int iterations; // Holds the count of iterations
  static int collisions; // Holds the count of collisions / hash
  
  iterations++; // Increment on each execution
  
  if(length == 0) {
    
    // If input hash matches with seed hash
    if(CRC32(seed, c_str(), seed.length()) == hash) {
      // Calculate time used
      double endTick = GetTickCount64() - startTick;
      collisions++;
      
      // Output
      cout << "Collision #" << collisions << ", Source: " << seed << ", Hash: 0x" << StrCRC32(seed)
				<< ", Iterations: " << iterations << endl << "Ticks: " << endTick << ", Seconds: "
				<< endTick / 1000 << ", Minutes: " << endTick / 1000 / 60 << ", Hours: " << endTick / 1000 / 60 / 60;
			cout << endl << endl;
    }
    return;
  }
  
  // Iterate through the input stringspace
  for(size_t i = 0; i < source.length(); i++) {
    string appended = seed + source[i];
    
    // Continue the loop
    CrackHash(source, hash, appended, length - 1);
  }
}

int main() {
  // Our target hash which we are going to crack
  unsigned int targetHash = 0xdeadbeef;
  
  // Loop our CrackHash function
  while(1) {
    // String startlength
    static unsigned int strlen = 1;
    CrackHash(alphabetLower + alphabetUpper + numerals + specialAnsi, targetHash, "", strlen);
		strlen++; // Increment the seed length after each iteration.
  }
}